<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.czlt.reproduction.mgr.mapper.MpLoginMapper" >
  <resultMap id="BaseResultMap" type="com.czlt.reproduction.mgr.entity.MpLogin" >
    <id column="loginId" property="loginid" jdbcType="INTEGER" />
    <result column="userid" property="userid" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="logintime" property="logintime" jdbcType="TIMESTAMP" />
    <result column="token" property="token" jdbcType="VARCHAR" />
    <result column="privatekey" property="privatekey" jdbcType="VARCHAR" />
    <result column="account" property="account" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    loginId, userid, username, logintime, token, privatekey, account
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from mp_login
    where loginId = #{loginid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from mp_login
    where loginId = #{loginid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.czlt.reproduction.mgr.entity.MpLogin" >
    insert into mp_login (loginId, userid, username, 
      logintime, token, privatekey, 
      account)
    values (#{loginid,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, 
      #{logintime,jdbcType=TIMESTAMP}, #{token,jdbcType=VARCHAR}, #{privatekey,jdbcType=VARCHAR}, 
      #{account,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.czlt.reproduction.mgr.entity.MpLogin" >
    insert into mp_login
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="loginid != null" >
        loginId,
      </if>
      <if test="userid != null" >
        userid,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="logintime != null" >
        logintime,
      </if>
      <if test="token != null" >
        token,
      </if>
      <if test="privatekey != null" >
        privatekey,
      </if>
      <if test="account != null" >
        account,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="loginid != null" >
        #{loginid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="logintime != null" >
        #{logintime,jdbcType=TIMESTAMP},
      </if>
      <if test="token != null" >
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="privatekey != null" >
        #{privatekey,jdbcType=VARCHAR},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.czlt.reproduction.mgr.entity.MpLogin" >
    update mp_login
    <set >
      <if test="userid != null" >
        userid = #{userid,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="logintime != null" >
        logintime = #{logintime,jdbcType=TIMESTAMP},
      </if>
      <if test="token != null" >
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="privatekey != null" >
        privatekey = #{privatekey,jdbcType=VARCHAR},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
    </set>
    where loginId = #{loginid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.czlt.reproduction.mgr.entity.MpLogin" >
    update mp_login
    set userid = #{userid,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      logintime = #{logintime,jdbcType=TIMESTAMP},
      token = #{token,jdbcType=VARCHAR},
      privatekey = #{privatekey,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR}
    where loginId = #{loginid,jdbcType=INTEGER}
  </update>
</mapper>